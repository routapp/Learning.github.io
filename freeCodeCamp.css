/*Change the Color of Text*/
/*element style - <h1 style="color:blue;">Hello World</h1>*/

/*Use CSS Selectors to Style Elements*/
/*<style>
  h2 {
    color: red;
  }
</style>*/

h1{
	color: blue;
  position: relative;
  top: 19px;
  /*line-height: 46px;*/
}

/*Use a CSS Class to Style an Element*/
.green-text{
	color: green;
}

/*Understand Absolute versus Relative Units*/
/*There are two types of length units: absolute and relative.*/
/*Absolute Lengths | cm, mm, in (1in = 96px = 2.54cm), pt points (1pt = 1/72 of 1in),pc  picas (1pc = 12 pt)*/
/*Relative Lengths | 
  px    Relative to the viewing device
  em    Relative to the font-size of the element (2em means 2 times the size of the current font) 
  rem   Relative to font-size of the root element 
  ex    Relative to the x-height of the current font (rarely used)  
  ch    Relative to the width of the "0" (zero) 
  vw    Relative to 1% of the width of the viewport*  
  vh    Relative to 1% of the height of the viewport* 
  vmin  Relative to 1% of viewport's* smaller dimension 
  vmax  Relative to 1% of viewport's* larger dimension  
  %     Relative to the parent element
*/


/*Prioritize One Style Over Another*/
/*
 1. class override the body element. (.text-color{color: red;})
 2. multiple class | The second declaration will always take precedence over the first.
    It doesn't matter which order the classes are listed in the HTML element.
 3. Override Class Declarations by Styling ID Attributes. (#text-color{color: blue;})
 4. Override Class Declarations with Inline Styles (<h1 style="color: green;">)
 5. Override All Other Styles by using Important (.text-color{color: red !important;})
*/

/*Use Hex Code for Specific Colors*/
/*
  6 hexadecimal digits to represent colors, 
  two each for the red (R), green (G), and blue (B) components.
  #000000 is black (lowest possible value) | #FFFFFF is white
  RED   (#FF0000) GREEN           (#00FF00) BLUE    (#0000FF)
  CYAN  (#00FFFF) MAGENTA/FUCHSIA (#FF00FF) YELLOW  (#FFFF00)

  Hex Code to Mix Colors | 
    The digit 0 is the lowest number in hex code, and represents a complete absence of color.
    The digit F is the highest number in hex code, and represents the maximum possible brightness.

  Abbreviated Hex Code | RED (#F00) GREEN (#0F0) BLUE (#00F)

  RGB values to Color Elements
  rgb(0, 0, 0) is black | rgb(255, 255, 255) is white

  Variables
    Declare | --penguin-skin: black;
    Assign  | background: var(--penguin-skin, gray); 
              gray is Fallback value, if the given variable is invalid.
*/


/*Inherit CSS Variables*/
/*
:root is a pseudo-class selector that matches the root element of the document, 
usually the html element. By creating your variables in :root, 
they will be available globally and can be accessed from any other selector in the style sheet.
  Change a variable for a specific area
  Use a media query to change a variable
*/
:root{
  --babypink: pink;
}

body{
  background-color: #D9EEE1;
  /*Inherit Styles from the Body Element*/
  color: palevioletred;
  font-size: 16px;
  font-family: /*FAMILY_NAME*/roboto , /*GENERIC_NAME*/Lobster;
}


/*Size Your Images*/
.image-100{
  width: 100px;
  /*Make Circular Images with a border-radius*/
  border-radius:50%;
}

/*Add Borders Around Your Elements*/
.thin-red-border {
    border-color: red;
    border-width: 5px;
    border-style: solid;
    border-radius:10px;
  }

  /*Background Color to a div Element*/
  .silver-background {
  background-color: silver;
}

#head-line{
  background-color: silver;
  border-radius:2px;
  padding: 10px;
  margin: -10px; /*If you set an element's margin to a negative value, the element will grow larger*/
}

.pad-clock{
  padding-top: 190px;
  padding-right: 100px;
  padding-bottom: 20px;
  padding-left: 280px;
}

.margin-clock{
  margin-top: 19px;
  margin-right: 10px;
  margin-bottom: 2px;
  margin-left: 28px;
}

/*Attribute Selectors to Style Elements*/
[type='radio'] {
  margin: 20px 0px 20px 0px;
}

/*Applied Visual Design*/
/*Create Visual Balance Using the text-align Property*/
.links {
    text-align: left;
    color: black;
    opacity:0.7;
  }
  .fullCard {
    width: 245px;
    /*height: 200px;*/
    border: 1px solid #ccc;
    border-radius: 5px;
    margin: 10px 5px;
    padding: 4px;
  }

  .fullCard h4{
    height: 20px;
    text-align: center;
    text-decoration: underline; /*<u> tag*/
    text-decoration: line-through; /*<s> tag*/
    /*background-color Property of Text*/
    background-color:rgba(45, 45, 45, 0.1);
  }

  .fullCard p{    
    text-align: justify;
    font-weight: bold; /*<strong> tag*/
    font-style: italic; /*<em> tag*/
    /*box-shadow: none|h-offset v-offset blur spread color |inset|initial|inherit;*/
    box-shadow: 0 10px 20px rgba(0,0,0,0.19), 0 6px 6px rgba(0,0,0,0.23);
    padding: 10px;
    /*Set the line-height of Paragraphs*/
    line-height: 25px;

  }

  .cardContent {
    padding: 5px;
  }

/*Add a box-shadow to a Card-like Element*/
/*
box-shadow: none|h-offset v-offset blur spread color |inset|initial|inherit;
*/

  /*text-transform Property to Make Text Uppercase*/
  h4{
    text-transform: uppercase; 
    /*
      text-transform: lowercase;    "transform me"
      text-transform: uppercase;    "TRANSFORM ME"
      text-transform: capitalize;   "Transform Me"
      text-transform: initial;      Use the default value
      text-transform: inherit;      Use the text-transform value from the parent element
      text-transform: none;         Default: Use the original text
    */
    /*font-size for Multiple Heading Elements*/
      font-size: 21px;
    /*font-weight for Multiple Heading Elements*/
      font-weight: 200; 
  }

  /*Hover State of an Anchor Tag*/
  a:hover {
  color: red;
  }

  /*Change an Element's Relative Position*/
  /*CSS treats each HTML element as its own box, which is usually referred to as the CSS Box Model. 
    Block-level items automatically start on a new line (think headings, paragraphs, and divs) 
    while inline items sit within surrounding content (like images or spans). 
    The default layout of elements in this way is called the normal flow of a document, 
    but CSS offers the position property to override it.

    When the position of an element is set to relative, 
    it allows you to specify how CSS should move it relative to its current position in the normal flow of the page. 
    It pairs with the CSS offset properties of left or right, and top or bottom. 
    These say how many pixels, percentages, or ems to move the item away from where it is normally positioned. 
  */
  p {
  position: relative;
  bottom: 10px;
  }

  /*Move a Relatively Positioned Element with CSS Offsets*/
  /*
    The CSS offsets of top or bottom, and left or right 
    tell the browser how far to offset an item relative 
    to where it would sit in the normal flow of the document.
  */

  /*Lock an Element to its Parent with Absolute Positioning*/
  #searchbar {
    position:absolute;
    top:50px;
    right:50px;
  }
  section {
    position: relative;
  }

  /*Lock an Element to the Browser Window with Fixed Positioning*/
  /*
    One key difference between the fixed and absolute positions is that 
    an element with a fixed position won't move when the user scrolls.
  */
  #navbar {
    position:fixed;
    top:0px;
    left:0px;
    width: 100%;
    background-color: #767676;

  }
  nav ul {
    margin: 0px;
    padding: 5px 0px 5px 30px;
  }
  nav li {
    display: inline;
    margin-right: 20px;
    color: #fff;
  }
  a {
    text-decoration: none;
  }

  /*Push Elements Left or Right with the float Property*/
  /*
    Floating elements are removed from the normal flow of a document 
    and pushed to either the left or right of their containing parent element. 
    It's commonly used with the width property to specify 
    how much horizontal space the floated element requires.*/
    #left {
      float:left;
      width: 50%;
    }
    #right {
      float:right;
      width: 40%;
    }

    /*The clear property specifies what should happen with the element that is next to a floating element.*/
    /*div2 {clear: left;} none, left, right, both, inherit*/
    .clearfix {
      clear: both;
      }

    aside, section {
      padding: 2px;
      background-color: #ccc;
    }
    
    /*Change the Position of Overlapping Elements with the z-index Property*/
    /* When elements are positioned to overlap 
       (i.e. using position: absolute | relative | fixed | sticky), 
       the element coming later in the HTML markup will, by default, 
       appear on the top of the other elements. 
       However, the z-index property can specify the order of 
       how elements are stacked on top of one another. 
       It must be an integer (i.e. a whole number and not a decimal), 
       and higher values for the z-index property of an element 
       move it higher in the stack than those with lower values. 
    */
    /*TRACE OUT. SOMETHING NOT WORKING*/
    .box {
      position: relative;
      width: 500px;
      height: 200px;
      /*margin-top: 10px;*/
    }
    .first {
      background-color: red;
      position: absolute;
      z-index:2;
    }
    .second {
      background-color: blue;
      position: absolute;
      left: 40px;
      top: 40px;
      z-index: 1;
    }

/*Center an Element Horizontally Using the margin Property*/
  /*
    Another positioning technique is to center a block element horizontally. 
    One way to do this is to set its margin to a value of auto.

    This method works for images, too. 
    Images are inline elements by default, 
    but can be changed to block elements 
    when you set the display property to block.
  */
  .margin-center {
    position: relative;
    /*top: 70px;*/
    background-color: yellow;
    height: 280px;
    width: 280px;
    margin:auto;
  }
  .overlap{
    position: relative;
    background-color: #fff;
    top: 10px;
    left: 10px;
  }

  /*
    When the position of an element is set to relative, 
    it allows you to specify how CSS should move it 
    relative to its current position 
    in the normal flow of the page. 
    in the normal flow of the page. 
    | AWAY FROM - left or right, and top or bottom
    | left: 15px - 15pxaway from left;
  */

  /*
  display: property | none, initialinline, block, contents, list-item,
  flex, grid, inline-block, inline-flex, inline-grid, inline-table,  
  run-in, table, table-caption, table-column-group, table-header-group, 
  table-footer-group, table-row-group, table-cell, table-column, table-row
  */
  .complementary-color1 {
    display: inline-block;
    height: 100px;
    width: 100px;
    background-color: #f00;
    color: #0ff;
    font-weight: 900;
    text-align: center;
  }

/*<!-- Complementary Colors -->*/
/*<!-- 
  When two colors are opposite each other on the color wheel, 
  they are called complementary colors. 
  They have the characteristic that if they are combined, 
  they "cancel" each other out and create a gray color. 
  However, when placed side-by-side, 
  these colors appear more vibrant 
  and produce a strong visual contrast. 
  red (#FF0000) and cyan (#00FFFF)
  green (#00FF00) and magenta (#FF00FF)
  blue (#0000FF) and yellow (#FFFF00)

  Modern color theory uses the additive RGB model (like on a computer screen) 
  and the subtractive CMY(K) model (like in printing).

  primary colors - Red (R), green (G), and blue (B)
  secondary colors - cyan (G + B), magenta (R + B) and yellow (R + G) - Mixing two primary colors.
  Tertiary colors - R (primary) + Y (secondary) = orange (tertiary). 
  This adds six more colors to a simple color wheel for a total of twelve.
-->*/

/*<!-- Hue of a Color -->*/

/*<!-- 
  Hue - 0 and 360 is given as a value between on the color circle.
  
  Saturation - 100% is given as fully saturated. 
  A fully saturated color has no gray in it, 
  and a minimally saturated color is almost completely gray.
  Amount of grey in color is saturation. 
  
  Lightness - 0% (black) to 100% (white), where 50% is the normal color.
  Amount of white or black in a color is lightness. 
  
  Color HSL
  red     hsl(0, 100%, 50%)
  yellow  hsl(60, 100%, 50%)
  green   hsl(120, 100%, 50%)
  cyan    hsl(180, 100%, 50%)
  blue    hsl(240, 100%, 50%)
  magenta hsl(300, 100%, 50%)
  black   hsl(0, 0% 0%)

  Tone of a Color (a tone is produced by adding gray or by both tinting and shading)
  Mixing white with a pure hue creates a tint of that color, and adding black will make a shade.
  Good Combonation of color 
  | change saturation & lightness keeping hue same 
  (same hue with different variations)

  linear-gradient() function | color transitions or gradients
  background: linear-gradient(gradient_direction, color 1, color 2, color 3, ...);
 -->*/
.color-gradient {
    border-radius: 20px;
    width: 70%;
    height: 400px;
    margin: 50px auto;
    background: linear-gradient(35deg, #CCFFFF,#FFCCCC);
  }

/*Linear Gradient to Create a Striped Element*/
/*repeating-linear-gradient(35deg, 0px [yellow -- blend -- blue] 40px [green -- blend -- red] 80px);*/
.repeat-gradient{
    border-radius: 20px;
    width: 70%;
    height: 400px;
    margin:  50 auto;
    background: repeating-linear-gradient(
      45deg,
      yellow 0px,
      yellow 40px,
      black 40px,
      black 80px
    );
  }

/*transform property, along with its scale() function 
to Change the Size of an ElementPassed*/
.ball{
    width: 40px;
    height: 40px;
    margin: 50 auto;
    position: fixed;
    background: linear-gradient(
      35deg,
      #ccffff,
      #ffcccc
    );
    border-radius: 50%;
  }
  #ball1{
    left: 20%;
  }
  #ball2{
    left: 65%;
    transform: scale(1.5);
  }

/*Flex Box*/
#box-container {
    height: 500px;
display : flex;
  }

  #box-1 {
    background-color: dodgerblue;
    width: 50%;
    height: 50%;
  }

  #box-2 {
    background-color: orangered;
    width: 50%;
    height: 50%;
  }



  

  /*media query*/
@media (max-width: 350px) {
  }


